# The contents below (if any) are custom contents provided by the
# Packer template during image build.
# -*- mode: ruby -*-
# vi: set ft=ruby :

########################################
# variables to control behaviour. variables are set as environment variables and must be exported.
#
# number of nodes.
# internal variable: number_nodes, environment variable: NR.
# possible values: 1 (default) up number of nodes host can serve. If value is lower than RF, it will be adjusted to RF.
number_nodes = ENV['NR'] || '1'
#
# replication factor.
# internal variable: replication_factor, environment variable: RF.
# possible values: 1 (default), 3, 5.
replication_factor = ENV['RF'] || '1'
if number_nodes.to_i < replication_factor.to_i
  number_nodes = replication_factor
end
#
# hostname
# internal variable: hostname, environment variable: NAME.
# possible values: see RFC 952 & 1123
hostname = ENV['NAME'] || 'yb'
#
# private network ip addresses.
# it's up to you to make sure the set addresses are valid and do not run out of the allowed ranges!
# internal variable: net_address, environment variable: NET_ADDRESS
# possible values: (1..255).(1..255).(1..255), default: 192.168.66
net_address = ENV['NET_ADDRESS'] || '192.168.66'
# internal variable: host_start_address, environment variable: HOST_ADDRESS
# possible values: (1..255), default: 80
host_start_address = ENV['HOST_ADDRESS'] || '80'
#
# regardless of how many nodes are actually used, let's always prepare a number of ip addresses.
# this allows you to add a node later on, without the need to manually add it to the hosts file.
# my macbook runs out of memory with 10 (very small) VMs, so that's the reason for 10.
number_ip_addresses_to_prepare = 10
#
# build arrays for the ip addresses, the master addresses and the lines for /etc/hosts.
ip_address = []
master_address = []
etc_hosts_line = []
for number in 1..number_ip_addresses_to_prepare
  # make sure the host number is a possible value
  if host_start_address.to_i+(number-1) <= 255
    ip_address[number] = "#{net_address}.#{host_start_address.to_i+(number-1)}"
    etc_hosts_line[number] = "#{ip_address[number]} #{hostname}-#{number} #{hostname}-#{number}.local"
    if number <= replication_factor.to_i
      master_address[number] = "#{hostname}-#{number}.local:7100"
    end
  end
end
#
# memory_size.
# internal variable: memory_size, environment variable: MEM, possible values: 1024 (default), <integer> indicating MB of memory for each VM.
memory_size = ENV['MEM'] || '1024'
#
# nr_cpus.
# internal variable: nr_cpus, environemnt variable: CPUS, possible values: 1 (default), <integer> indicating number of VCPUs for each VM.
nr_cpus = ENV['CPUS'] || '1'
#
# add_disk.
# internal variable: add_disk, environment variable: ADD_DISK, possible values: yes (default), <anything else> skips creation of a disk for the YB database.
add_disk = ENV['ADD_DISK'] || 'yes'
#
# disk_size
# internal variable: disk_size, environment variable: DISK_SIZE, possible values: 10240 (default), <integer> indicating the size of the disk in MB.
disk_size = ENV['DISK_SIZE'] || '10240'
#
# start_services
# internaal variable: start_services, environment variable: START_SERVICES, possible values: yes (default), <anything else> skips enabling autostart and starting up YB services.
start_services = ENV['START_SERVICES'] || 'yes'

# partition and format.
# This is a (console/bash) code block in a variable.
# This checks for a blockdevice /dev/sdb, and if it's found all the commands to make it a mounted filesystem for use with YB.
partition_and_format = <<-'MANAGE_DISK'
if [ -b /dev/sdb ]; then
  parted /dev/sdb --script -- mklabel gpt
  parted /dev/sdb --script -- mkpart primary 0% 100%
  mkfs.xfs /dev/sdb1
  echo '/dev/sdb1 /mnt/disk1 xfs noatime,nofail,allocsize=4m 0 0' >> /etc/fstab
  mount /mnt/disk1
  chown yb.yb /mnt/disk1
fi
MANAGE_DISK

Vagrant.configure("2") do |config|

  config.trigger.before :up do |trigger|
    trigger.info = "vagrant runs with the following settings:\nenvironment variable value\nNR                   #{number_nodes}\nRF                   #{replication_factor}\nNAME                 #{hostname}\nNET_ADDRESS          #{net_address}\nHOST_ADDRESS         #{host_start_address}\nMEM                  #{memory_size}\nCPUS                 #{nr_cpus}\nADD_DISK             #{add_disk}\nDISK_SIZE            #{disk_size}\nSTART_SERVICES       #{start_services}"
  end

  # all the nodes use an identical image.
  config.vm.box = "FritsHoogland/centos8-yb-rf3"

  # we use the same number of nodes as the replication factor.
  # for RF=3, we need 3 yb-master processes, for which we create a VM each.
  # each VM runs a yb-tserver process too, for which the number can be higher.
  (1..number_nodes.to_i).each do |vm_nr|
    config.vm.define "#{hostname}-#{vm_nr}" do |subconfig|
      subconfig.vm.hostname = "#{hostname}-#{vm_nr}.local"
      subconfig.vm.network :private_network, ip: ip_address[vm_nr], hostname: true
      subconfig.vm.provider :virtualbox do |vb|
        vb.memory = memory_size
        vb.cpus = nr_cpus
        if add_disk == 'yes'
          data1_disk = "data1_#{hostname}-vm#{vm_nr}.vdi"
          if !File.exist?(data1_disk)
            vb.customize [ 'createhd', '--filename', data1_disk, '--size', disk_size ]
          end
          vb.customize [ 'storageattach', :id, '--storagectl', 'SATA Controller', '--port', 2, '--device', 0, '--type', 'hdd', '--medium', data1_disk ]
        end
      end
      if vm_nr <= replication_factor.to_i
        subconfig.vm.provision "master.conf:master_addresses", type: "shell", privileged: true, inline: "sed -i 's/\\(--master_addresses=\\)127.0.0.1:7100/\\1#{master_address.compact.join(',')}/' /home/yb/master.conf"
        subconfig.vm.provision "master.conf:replication_factor", type: "shell", privileged: true, inline: "sed -i 's/\\(--replication_factor=\\)1/\\1#{replication_factor}/' /home/yb/master.conf"
        subconfig.vm.provision "master.conf:additional_flag", type: "shell", privileged: true, inline: "echo '--default_memory_limit_to_ram_ratio=1' >> /home/yb/master.conf"
      end
      subconfig.vm.provision "tserver.conf:tserver_master_addrs", type: "shell", privileged: true, inline: "sed -i 's/\\(--tserver_master_addrs=\\)127.0.0.1:7100/\\1#{master_address.compact.join(',')}/' /home/yb/tserver.conf"
      subconfig.vm.provision "tserver.conf:additional_flag", type: "shell", privileged: true, inline: "echo '--default_memory_limit_to_ram_ratio=1' >> /home/yb/tserver.conf"
      subconfig.vm.provision "etc_hosts", type: "shell", privileged: true, inline: "printf '#{etc_hosts_line.compact.join('\n')}\n' >> /etc/hosts"
      # provisioning
      # if we find a blockdevice /dev/sdb, a disk is attached.
      subconfig.vm.provision "setup /dev/sdb", type: "shell", privileged: true, inline: partition_and_format
      if start_services == 'yes'
        if vm_nr <= replication_factor.to_i
          subconfig.vm.provision "enable yb-master service", type: "shell", privileged: true, inline: "systemctl enable yb-master"
          subconfig.vm.provision "start yb-master service", type: "shell", privileged: true, inline: "systemctl start yb-master"
        end
        subconfig.vm.provision "enable yb-tserver service", type: "shell", privileged: true, inline: "systemctl enable yb-tserver"
        subconfig.vm.provision "start yb-tserver service", type: "shell", privileged: true, inline: "systemctl start yb-tserver"
      end
    end
  end
end
