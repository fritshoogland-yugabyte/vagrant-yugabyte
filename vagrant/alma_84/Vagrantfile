# -*- mode: ruby -*-
# vi: set ft=ruby :

########################################
# variables to control behaviour. variables are set as environment variables and must be exported.
#
# these are the default variables:
if !File.exists?('vagrant_settings.json')
  settings = {}
  settings['number_nodes'] = '1'
  settings['replication_factor'] = '1'
  settings['hostname'] = 'yb'
  settings['net_address'] = '192.168.66'
  settings['host_start_address'] = '80'
  settings['memory_size'] = '1024'
  settings['nr_cpus'] = '1'
  settings['add_disk'] = 'yes'
  settings['disk_size'] = '10240'
  settings['start_services'] = 'yes'
else
  file = File.read('vagrant_settings.json')
  settings = JSON.parse(file)
end
#
changed_settings = {}
settings.each do |name, value|
  # number of nodes.
  # internal variable: number_nodes, environment variable: NR.
  # possible values: 1 (default) up to 10. If value is lower than RF, it will be adjusted to RF.
  if name = 'number_nodes'
    if ENV.key?('NR')
      changed_settings[name] = ENV['NR']
    end
  end
  # replication factor.
  # internal variable: replication_factor, environment variable: RF.
  # possible values: 1 (default), 3, 5, 7.
  # number_nodes is adjusted to at least replication_factor is number_nodes is lower.
  if name = 'replication_factor'
    if ENV.key?('RF')
      changed_settings[name] = ENV['RF']
      if !changed_settings.key?('number_nodes')
        changed_settings['number_nodes'] = changed_settings['replication_factor']
      end
      if changed_settings['number_nodes'].to_i < changed_settings['replication_factor'].to_i
        change_settings['number_nodes'] = changed_settings['replication_factor']
      end
    end
  end
  # hostname
  # internal variable: hostname, environment variable: NAME.
  # possible values: see RFC 952 & 1123
  if name = 'hostname'
    if ENV.key?('NAME')
      changed_settings[name] = ENV['NAME']
    end
  end
  # private network ip addresses.
  # it's up to you to make sure the set addresses are valid and do not run out of the allowed ranges!
  # internal variable: net_address, environment variable: NET_ADDRESS
  # possible values: (1..255).(1..255).(1..255), default: 192.168.66
  if name = 'net_address'
    if ENV.key?('NET_ADDRESS')
      changed_settings[name] = ENV['NET_ADDRESS']
    end
  end
  # internal variable: host_start_address, environment variable: HOST_ADDRESS
  # possible values: (1..255), default: 80
  if name = 'host_start_address'
    if ENV.key?('HOST_ADDRESS')
      changed_settings[name] = ENV['HOST_ADDRESS']
    end
  end
  # memory_size.
  # internal variable: memory_size, environment variable: MEM, possible values: 1024 (default), <integer> indicating MB of memory for each VM.
  if name = 'memory_size'
    if ENV.key?('MEM')
      changed_settings[name] = ENV['MEM']
    end
  end
  # nr_cpus.
  # internal variable: nr_cpus, environemnt variable: CPUS, possible values: 1 (default), <integer> indicating number of VCPUs for each VM.
  if name = 'nr_cpus'
    if ENV.key?('CPUS')
      changed_settings[name] = ENV['CPUS']
    end
  end
  # add_disk.
  # internal variable: add_disk, environment variable: ADD_DISK, possible values: yes (default), <anything else> skips creation of a disk for the YB database.
  if name = 'add_disk'
    if ENV.key?('ADD_DISK')
      changed_settings[name] = ENV['ADD_DISK']
    end
  end
  # disk_size
  # internal variable: disk_size, environment variable: DISK_SIZE, possible values: 10240 (default), <integer> indicating the size of the disk in MB.
  if name = 'disk_size'
    if ENV.key?('DISK_SIZE')
      changed_settings[name] = ENV['DISK_SIZE']
    end
  end
  # start_services
  # internal variable: start_services, environment variable: START_SERVICES, possible values: yes (default), <anything else> skips enabling autostart and starting up YB services.
  if name = 'start_services'
    if ENV.key?('START_SERVICES')
      changed_settings[name] = ENV['START_SERVICES']
    end
  end
end
changed_settings.each do |name, value|
  settings[name] = value
end
File.write('vagrant_settings.json', JSON.dump(settings))
#
# now set the variables into the appropriate variables
number_nodes =  settings['number_nodes']
replication_factor =  settings['replication_factor']
hostname =  settings['hostname']
net_address = settings['net_address']
host_start_address = settings['host_start_address']
memory_size = settings['memory_size']
nr_cpus = settings['nr_cpus']
add_disk = settings['add_disk']
disk_size = settings['disk_size']
start_services = settings['start_services']
number_ip_addresses_to_prepare = 10
ip_address = []
master_address = []
etc_hosts_line = []
for number in 1..number_ip_addresses_to_prepare
  # make sure the host number is a possible value
  if host_start_address.to_i+(number-1) <= 255
    ip_address[number] = "#{net_address}.#{host_start_address.to_i+(number-1)}"
    etc_hosts_line[number] = "#{ip_address[number]} #{hostname}-#{number} #{hostname}-#{number}.local"
    if number <= replication_factor.to_i
      master_address[number] = "#{hostname}-#{number}.local:7100"
    end
  end
end

# partition and format.
# This is a (console/bash) code block in a variable.
# This checks for a blockdevice /dev/sdb, and if it's found all the commands to make it a mounted filesystem for use with YB.
partition_and_format = <<-'MANAGE_DISK'
if [ -b /dev/sdb ]; then
  parted /dev/sdb --script -- mklabel gpt
  parted /dev/sdb --script -- mkpart primary 0% 100%
  mkfs.xfs /dev/sdb1
  echo '/dev/sdb1 /mnt/d0 xfs noatime,nofail,allocsize=4m 0 0' >> /etc/fstab
  mount /mnt/d0
  chown yugabyte.yugabyte /mnt/d0
fi
MANAGE_DISK

Vagrant.configure("2") do |config|

  config.trigger.before :up do |trigger|
    trigger.info = "vagrant runs with the following settings:\nenvironment variable value\nNR                   #{number_nodes}\nRF                   #{replication_factor}\nNAME                 #{hostname}\nNET_ADDRESS          #{net_address}\nHOST_ADDRESS         #{host_start_address}\nMEM                  #{memory_size}\nCPUS                 #{nr_cpus}\nADD_DISK             #{add_disk}\nDISK_SIZE            #{disk_size}\nSTART_SERVICES       #{start_services}"
  end

  # all the nodes use an identical image.
  config.vm.box = "FritsHoogland/alma8-yugabyte-2.9.0.0"

  # we use the same number of nodes as the replication factor.
  # for RF=3, we need 3 yb-master processes, for which we create a VM each.
  # each VM runs a yb-tserver process too, for which the number can be higher.
  (1..number_nodes.to_i).each do |vm_nr|
    config.vm.define "#{hostname}-#{vm_nr}" do |subconfig|
      subconfig.vm.hostname = "#{hostname}-#{vm_nr}.local"
      subconfig.vm.network :private_network, ip: ip_address[vm_nr], hostname: true
      subconfig.vm.provider :virtualbox do |vb|
        vb.memory = memory_size
        vb.cpus = nr_cpus
        if add_disk == 'yes'
          data1_disk = "data1_#{hostname}-vm#{vm_nr}.vdi"
          if !File.exist?(data1_disk)
            vb.customize [ 'createhd', '--filename', data1_disk, '--size', disk_size ]
          end
          vb.customize [ 'storageattach', :id, '--storagectl', 'SATA Controller', '--port', 2, '--device', 0, '--type', 'hdd', '--medium', data1_disk ]
        end
      end
      if vm_nr <= replication_factor.to_i
        subconfig.vm.provision "master.conf:master_addresses", type: "shell", privileged: true, inline: "sed -i 's/\\(--master_addresses=\\)127.0.0.1:7100/\\1#{master_address.compact.join(',')}/' /opt/yugabyte/conf/master.conf"
        subconfig.vm.provision "master.conf:replication_factor", type: "shell", privileged: true, inline: "sed -i 's/\\(--replication_factor=\\)1/\\1#{replication_factor}/' /opt/yugabyte/conf/master.conf"
        #subconfig.vm.provision "master.conf:additional_flag", type: "shell", privileged: true, inline: "echo '--default_memory_limit_to_ram_ratio=1' >> /opt/yugabyte/conf/master.conf"
      end
      subconfig.vm.provision "tserver.conf:tserver_master_addrs", type: "shell", privileged: true, inline: "sed -i 's/\\(--tserver_master_addrs=\\)127.0.0.1:7100/\\1#{master_address.compact.join(',')}/' /opt/yugabyte/conf/tserver.conf"
      #subconfig.vm.provision "tserver.conf:additional_flag", type: "shell", privileged: true, inline: "echo '--default_memory_limit_to_ram_ratio=1' >> /opt/yugebyate/conf/tserver.conf"
      subconfig.vm.provision "etc_hosts", type: "shell", privileged: true, inline: "printf '#{etc_hosts_line.compact.join('\n')}\n' >> /etc/hosts"
      # provisioning
      # if we find a blockdevice /dev/sdb, a disk is attached.
      subconfig.vm.provision "setup /dev/sdb", type: "shell", privileged: true, inline: partition_and_format
      if start_services == 'yes'
        if vm_nr <= replication_factor.to_i
          subconfig.vm.provision "enable yb-master service", type: "shell", privileged: true, inline: "systemctl enable yb-master"
          subconfig.vm.provision "start yb-master service", type: "shell", privileged: true, inline: "systemctl start yb-master"
        end
        subconfig.vm.provision "enable yb-tserver service", type: "shell", privileged: true, inline: "systemctl enable yb-tserver"
        subconfig.vm.provision "start yb-tserver service", type: "shell", privileged: true, inline: "systemctl start yb-tserver"
      end
    end
  end
end

# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.require_version ">= 1.8.1"
Vagrant.configure("2") do |config|
  config.vm.box = "FritsHoogland/alma_84"
  #config.vm.box = "file:///Volumes/Samsung_T3/packer/packer-boxes/box/alma_84_virtualbox.box"
  config.vm.box_check_update = true
  config.vm.hostname = "alma-84"
  # config.ssh.insert_key = false

  # config.vm.network "forwarded_port", guest: 80, host: 8080
  #config.vm.network :private_network, ip: "192.168.10.10"

  config.vm.provider :virtualbox do |vb|
    vb.gui = false
    vb.memory = 2048
    vb.cpus = 2

    # the resolver mode will interpret the DNS requests and use
    # the host's DNS API to query the information and return it to the guest
    vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]

    # Enabling DNS proxy in NAT mode.
    # The NAT engine by default offers the same DNS servers
    # to the guest that are configured on the host.
    vb.customize ["modifyvm", :id, "--natdnsproxy1", "on"]

    # Enabling detecting of I/O APIC components
    vb.customize ["modifyvm", :id, "--ioapic", "on"]
  end

end
